/*
 * Safe Transaction Service API
 *
 * API to keep track of transactions sent via Gnosis Safe smart contracts
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SafeMultisigTransactionWithTransfersResponse {
    #[serde(rename = "safe")]
    pub safe: String,
    #[serde(rename = "to")]
    pub to: String,
    #[serde(rename = "value")]
    pub value: String,
    #[serde(rename = "data", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub data: Option<Option<String>>,
    #[serde(rename = "operation")]
    pub operation: i32,
    #[serde(rename = "gasToken", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gas_token: Option<Option<String>>,
    #[serde(rename = "safeTxGas")]
    pub safe_tx_gas: i32,
    #[serde(rename = "baseGas")]
    pub base_gas: i32,
    #[serde(rename = "gasPrice")]
    pub gas_price: String,
    #[serde(rename = "refundReceiver", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub refund_receiver: Option<Option<String>>,
    #[serde(rename = "nonce")]
    pub nonce: i32,
    #[serde(rename = "executionDate")]
    pub execution_date: String,
    #[serde(rename = "submissionDate")]
    pub submission_date: String,
    #[serde(rename = "modified")]
    pub modified: String,
    #[serde(rename = "blockNumber", skip_serializing_if = "Option::is_none")]
    pub block_number: Option<i32>,
    #[serde(rename = "transactionHash")]
    pub transaction_hash: String,
    #[serde(rename = "safeTxHash")]
    pub safe_tx_hash: String,
    #[serde(rename = "executor", skip_serializing_if = "Option::is_none")]
    pub executor: Option<String>,
    #[serde(rename = "isExecuted")]
    pub is_executed: bool,
    #[serde(rename = "isSuccessful", skip_serializing_if = "Option::is_none")]
    pub is_successful: Option<bool>,
    #[serde(rename = "ethGasPrice", skip_serializing_if = "Option::is_none")]
    pub eth_gas_price: Option<String>,
    #[serde(rename = "maxFeePerGas", skip_serializing_if = "Option::is_none")]
    pub max_fee_per_gas: Option<String>,
    #[serde(rename = "maxPriorityFeePerGas", skip_serializing_if = "Option::is_none")]
    pub max_priority_fee_per_gas: Option<String>,
    #[serde(rename = "gasUsed", skip_serializing_if = "Option::is_none")]
    pub gas_used: Option<i32>,
    #[serde(rename = "fee", skip_serializing_if = "Option::is_none")]
    pub fee: Option<i32>,
    #[serde(rename = "origin", skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    #[serde(rename = "dataDecoded", skip_serializing_if = "Option::is_none")]
    pub data_decoded: Option<String>,
    #[serde(rename = "confirmationsRequired")]
    pub confirmations_required: i32,
    #[serde(rename = "confirmations", skip_serializing_if = "Option::is_none")]
    pub confirmations: Option<Box<crate::models::SafeMultisigConfirmationResponse>>,
    #[serde(rename = "trusted")]
    pub trusted: bool,
    #[serde(rename = "signatures", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub signatures: Option<Option<String>>,
    #[serde(rename = "transfers")]
    pub transfers: Vec<crate::models::TransferWithTokenInfoResponse>,
    #[serde(rename = "txType", skip_serializing_if = "Option::is_none")]
    pub tx_type: Option<String>,
}

impl SafeMultisigTransactionWithTransfersResponse {
    pub fn new(safe: String, to: String, value: String, operation: i32, safe_tx_gas: i32, base_gas: i32, gas_price: String, nonce: i32, execution_date: String, submission_date: String, modified: String, transaction_hash: String, safe_tx_hash: String, is_executed: bool, confirmations_required: i32, trusted: bool, transfers: Vec<crate::models::TransferWithTokenInfoResponse>) -> SafeMultisigTransactionWithTransfersResponse {
        SafeMultisigTransactionWithTransfersResponse {
            safe,
            to,
            value,
            data: None,
            operation,
            gas_token: None,
            safe_tx_gas,
            base_gas,
            gas_price,
            refund_receiver: None,
            nonce,
            execution_date,
            submission_date,
            modified,
            block_number: None,
            transaction_hash,
            safe_tx_hash,
            executor: None,
            is_executed,
            is_successful: None,
            eth_gas_price: None,
            max_fee_per_gas: None,
            max_priority_fee_per_gas: None,
            gas_used: None,
            fee: None,
            origin: None,
            data_decoded: None,
            confirmations_required,
            confirmations: None,
            trusted,
            signatures: None,
            transfers,
            tx_type: None,
        }
    }
}


