/*
 * Safe Transaction Service API
 *
 * API to keep track of transactions sent via Gnosis Safe smart contracts
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`v2_safes_collectibles_list`]
#[derive(Clone, Debug, Default)]
pub struct V2SafesCollectiblesListParams {
    pub address: String,
    /// Number of results to return per page.
    pub limit: Option<i32>,
    /// The initial index from which to return the results.
    pub offset: Option<i32>,
    /// If `True` just trusted tokens will be returned
    pub trusted: Option<bool>,
    /// If `True` spam tokens will not be returned
    pub exclude_spam: Option<bool>
}


/// struct for typed errors of method [`v2_safes_collectibles_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2SafesCollectiblesListError {
    Status404(),
    Status422(),
    UnknownValue(serde_json::Value),
}


/// Get collectibles (ERC721 tokens) and information about them
pub async fn v2_safes_collectibles_list(configuration: &configuration::Configuration, params: V2SafesCollectiblesListParams) -> Result<Vec<crate::models::SafeCollectibleResponse>, Error<V2SafesCollectiblesListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let address = params.address;
    let limit = params.limit;
    let offset = params.offset;
    let trusted = params.trusted;
    let exclude_spam = params.exclude_spam;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/safes/{address}/collectibles/", local_var_configuration.base_path, address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = trusted {
        local_var_req_builder = local_var_req_builder.query(&[("trusted", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = exclude_spam {
        local_var_req_builder = local_var_req_builder.query(&[("exclude_spam", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2SafesCollectiblesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

